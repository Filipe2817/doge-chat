syntax = "proto3";

package com.doge.common.proto;

option java_package = "com.doge.common.proto";
option java_multiple_files = true;

// Chat

message ChatMessage {
    string topic = 1;
    string clientId = 2;
    string content = 3;
}

message ForwardChatMessage {
    ChatMessage chatMessage = 1;
    int32 senderId = 2;
    map<int32, int32> vectorClock = 3;
}

// Commands

message GetOnlineUsersMessage {
    string topic = 1;
    string clientId = 2;
}

message GetOnlineUsersResponseMessage {
    repeated string onlineUsers = 1;
}

// Control

message AnnounceMessage {
    string clientId = 1;
    string topic = 2;
}

message AnnounceResponseMessage {
    enum Status {
        SUCCESS = 0;
        FAILURE = 1;
    }

    Status status = 1;
}

message ExitMessage {
    string clientId = 1;
    string topic = 2;
}


message ForwardUserOnlineMessage {
    message DotMessage {
        int32 serverId = 1;
        int32 clock = 2;
    }

    // DotSet
    message DotStoreMessage {
        repeated DotMessage dot = 1;
    }

    string clientId = 1;
    string topic = 2;

    enum Status {
        ONLINE = 0;
        OFFLINE = 1;
    }

    Status status = 3;

    map<int32, int32> vectorClock = 4;

    // Map from @UserIdType to DotSet
    map<string, DotStoreMessage> dotStore = 5;
}

// Aggregation

message PeerEntry {
  int32 id      = 1;
  int32 age     = 2;
}

message ShuffleMessage {
  int32 type = 1;
  int32 senderId = 2;
  repeated PeerEntry entries = 3;
}

// Wrapper

message MessageWrapper {
    oneof message_type {
        ChatMessage chatMessage = 1;
        ForwardChatMessage forwardChatMessage = 2;

        GetOnlineUsersMessage getOnlineUsersMessage = 3;
        GetOnlineUsersResponseMessage getOnlineUsersResponseMessage = 4;

        AnnounceMessage announceMessage = 5;
        AnnounceResponseMessage announceResponseMessage = 6;
        ExitMessage exitMessage = 7;
        ForwardUserOnlineMessage forwardUserOnlineMessage = 8;

        ShuffleMessage shuffleMessage = 9;
    }
}
