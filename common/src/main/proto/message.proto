syntax = "proto3";

package com.doge.common.proto;

option java_package = "com.doge.common.proto";
option java_multiple_files = true;

// Chat

message ChatMessage {
    string topic = 1;
    string clientId = 2;
    string content = 3;
}

message ForwardChatMessage {
    ChatMessage chatMessage = 1;
    int32 senderId = 2;
    map<int32, int32> vectorClock = 3;
}

// Commands

message GetOnlineUsersMessage {
    string topic = 1;
    string clientId = 2;
}

message GetOnlineUsersResponseMessage {
    repeated string onlineUsers = 1;
}

// Logs

message LogRequestMessage {
    string topic = 1;
    int32 last = 2;
}

message UserLogRequestMessage {
    string topic = 1;
    int32 last = 2;
    string userId = 3;
}

service LogService {
    rpc GetLogs (LogRequestMessage) returns (stream ChatMessage);
    rpc GetUserLogs (UserLogRequestMessage) returns (stream ChatMessage);
}

// Control

message AnnounceMessage {
    string clientId = 1;
    string topic = 2;
}

message AnnounceResponseMessage {
    enum Status {
        SUCCESS = 0;
        FAILURE = 1;
    }

    Status status = 1;
}

message ExitMessage {
    string clientId = 1;
    string topic = 2;
}

message ForwardUserOnlineMessage {
    message DotMessage {
        int32 serverId = 1;
        int32 clock = 2;
    }

    message DotSetMessage {
        repeated DotMessage dot = 1;
    }

    string clientId = 1;
    string topic = 2;

    enum Status {
        ONLINE = 0;
        OFFLINE = 1;
    }

    Status status = 3;

    map<int32, int32> vectorClock = 4;

    // Map from @UserIdType to DotSet
    map<string, DotSetMessage> dotStore = 5;
}

// CYCLON

enum ShuffleMessageType {
    SHUFFLE_REQUEST  = 0;
    SHUFFLE_RESPONSE = 1;
    SHUFFLE_BUSY     = 2;
}

enum RandomWalkMessageType {
    RANDOM_WALK_REQUEST = 0;
    RANDOM_WALK_INTRO   = 1;
    RANDOM_WALK_SHUFFLE = 2;
    RANDOM_WALK_RESPONSE = 3;
}

message PeerEntry {
    int32 id = 1;
    int32 age = 2;
}

message ShuffleMessage {
    ShuffleMessageType type = 1;
    int32 senderId = 2;
    repeated PeerEntry entries = 3;
}

message RandomWalkMessage {
    RandomWalkMessageType type = 1;
    int32 senderId = 2;
    int32 ttl = 3;
    repeated PeerEntry entries = 4;
}

// Aggregation

message AggregationStartMessage {
    string topic = 1;
    string clientId = 2; // Will serve as id of the aggregation
}

message AggregationResultMessage {
    string topic = 1;
    repeated int32 serverIds = 2;
}

message ChatServerStateMessage {
    int32 id = 1;
    int32 userCount = 2;
    int32 topicCount = 3;
}

message GetChatServerStateMessage {}

message AggregationCurrentStateMessage {
    string aggregationId = 1;
    string topic = 2;
    repeated ChatServerStateMessage chatServerStates = 3;
}

// Wrapper

message MessageWrapper {
    oneof message_type {
        ChatMessage chatMessage = 1;
        ForwardChatMessage forwardChatMessage = 2;

        LogRequestMessage logRequestMessage = 3;
        UserLogRequestMessage userLogRequestMessage = 4;

        GetOnlineUsersMessage getOnlineUsersMessage = 5;
        GetOnlineUsersResponseMessage getOnlineUsersResponseMessage = 6;

        AnnounceMessage announceMessage = 7;
        AnnounceResponseMessage announceResponseMessage = 8;
        ExitMessage exitMessage = 9;
        ForwardUserOnlineMessage forwardUserOnlineMessage = 10;

        ShuffleMessage shuffleMessage = 11;
        RandomWalkMessage randomWalkMessage = 12;

        AggregationStartMessage aggregationStartMessage = 13;
        AggregationResultMessage aggregationResultMessage = 14;
        AggregationCurrentStateMessage aggregationCurrentStateMessage = 15;
        GetChatServerStateMessage getChatServerStateMessage = 16;
        ChatServerStateMessage chatServerStateMessage = 17;
    }
}
